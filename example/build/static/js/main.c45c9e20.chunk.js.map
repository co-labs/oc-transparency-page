{"version":3,"sources":["../../src/theme.js","../../src/utils/generateRainbow.js","../../src/components/BarChart.js","../../src/components/ExpensesTable.js","../../src/components/PieChart.js","../../src/index.js","App.js","index.js"],"names":["useStyles","body__title","fontSize","textAlign","charts","charts__bar","charts__pie","charts__table","header__logo","header__title","pagination","marginLeft","pagination__first","pagination__prev","table","table__head","table__head__row","table__head__row__cell","table__body","table__body__row","table__body__row__cell","table__footer","table__footer__row","wrapper","border","r","h","b","g","BarChart","expenses","periods","cats","monthKey","label","borderColor","catKey","backgroundColor","formattedData","labels","datasets","responsive","position","onChangePage","handleNextButtonClick","handleLastPageButtonClick","useTheme","rowsPerPage","handleFirstPageButtonClick","theme","handleBackButtonClick","a","classes","pagination__last","TablePaginationActions","PropTypes","isRequired","React","handleChangePage","setPage","handleChangeRowsPerPage","setRowsPerPage","Math","rows","Paper","className","width","row","height","ExpensesTable","inputProps","PieChart","hoverBackgroundColor","orderBy","labelKey","item","locale","messages","date","options","maintainAspectRatio","offset","slug","variables","account","fetchMore","data","updateQuery","fetchMoreResult","header","body","apiKey","localStorage","getItem","console","error","client","ApolloClient","uri","cache","InMemoryCache","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c45c9e20.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles'\n\nexport const useStyles = makeStyles((theme) => ({\n  body: {},\n  body__title: {\n    fontSize: '1.5em',\n    textAlign: 'center',\n    [theme.breakpoints.down('xs')]: {\n      fontSize: '1.2em',\n    }\n  },\n  charts: {\n    flexGrow: 1,\n  },\n  charts__bar: {},\n  charts__pie: {},\n  charts__table: {},\n  header: {\n    padding: '.5em',\n    textAlign: 'center',\n  },\n  header__logo: {\n    height: '1em !important',\n  },\n  header__title: {\n    fontSize: '2em',\n    [theme.breakpoints.down('xs')]: {\n      fontSize: '1.6em',\n    }\n  },\n  pagination: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n  pagination__first: {},\n  pagination__prev: {},\n  pagination__next: {},\n  pagination__last: {},\n  table: {},\n  table__head: {},\n  table__head__row: {},\n  table__head__row__cell: {\n    fontSize: '1em',\n    [theme.breakpoints.down('xs')]: {\n      fontSize: '.8em',\n      padding: 10,\n    }\n  },\n  table__body: {},\n  table__body__row: {},\n  table__body__row__cell: {\n    fontSize: '.9em',\n    [theme.breakpoints.down('xs')]: {\n      fontSize: '.7em',\n      padding: 10,\n    }\n  },\n  table__footer: {},\n  table__footer__row: {},\n  'table-container': {},\n  wrapper: {\n    border: '1px solid red',\n  },\n}))\n","/**\n * Helpers to generate a Rainbow between a number of step\n * @param numOfSteps\n * @param step\n * @returns {string}\n */\nexport default (numOfSteps, step) => {\n  let r, g, b\n  const h = step / numOfSteps\n  const i = ~~(h * 6)\n  const f = h * 6 - i\n  const q = 1 - f\n  switch (i % 6) {\n    case 0:\n      r = 1\n      g = f\n      b = 0\n      break\n    case 1:\n      r = q\n      g = 1\n      b = 0\n      break\n    case 2:\n      r = 0\n      g = 1\n      b = f\n      break\n    case 3:\n      r = 0\n      g = q\n      b = 1\n      break\n    case 4:\n      r = f\n      g = 0\n      b = 1\n      break\n    case 5:\n      r = 1\n      g = 0\n      b = q\n      break\n  }\n  return `#${`00${(~~(r * 255)).toString(16)}`.slice(-2)}${`00${(~~(\n    g * 255\n  )).toString(16)}`.slice(-2)}${`00${(~~(b * 255)).toString(16)}`.slice(-2)}`\n}\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport moment from 'moment'\nimport generateRainbow from '../utils/generateRainbow'\nimport { Bar } from 'react-chartjs-2'\n\n/**\n * BarChart formatter for expenses\n * @param expenses\n * @param width\n * @param height\n * @returns {JSX.Element}\n * @constructor\n */\nconst BarChart = ({ expenses, width, height }) => {\n  const periods = []\n  const cats = []\n\n  expenses = orderBy(expenses, (item) => item.createdAt)\n\n  expenses.map((item) => {\n    // eslint-disable-next-line new-cap\n    const month = new moment(item.createdAt).format('MM/YYYY')\n\n    let monthKey = periods.findIndex((i) => i === month)\n\n    if (monthKey === -1) {\n      monthKey = periods.push(month)\n      monthKey--\n    }\n\n    let catKey = cats.findIndex((i) => i.label === item.tags[0])\n\n    if (catKey === -1) {\n      if (typeof item.tags[0] !== 'undefined') {\n        catKey = cats.push({\n          label: item.tags[0],\n          data: [],\n          backgroundColor: null,\n          borderColor: null,\n          borderWidth: 1,\n          stack: 'default'\n        })\n\n        catKey = catKey - 1\n      }\n    }\n\n    if (typeof cats[catKey] !== 'undefined') {\n      if (typeof cats[catKey].data[monthKey] === 'undefined') {\n        cats[catKey].data[monthKey] = 0\n      }\n\n      cats[catKey].data[monthKey] += item.amount / 100\n    }\n  })\n\n  cats.map((i, k) => {\n    cats[k].backgroundColor = generateRainbow(cats.length, k)\n    cats[k].borderColor = generateRainbow(cats.length, k)\n  })\n\n  const formattedData = {\n    labels: periods,\n    datasets: cats\n  }\n\n  const options = {\n    maintainAspectRatio: false,\n    responsive: true,\n  }\n\n  return (\n    <div style={{ height: width > 600 ? 350 : 450, position: 'relative' }}>\n      <Bar\n        data={formattedData}\n        options={options}\n      />\n    </div>\n  )\n}\n\nexport default BarChart\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@material-ui/core/styles'\nimport { useStyles } from '../theme'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableFooter from '@material-ui/core/TableFooter'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport Paper from '@material-ui/core/Paper'\nimport IconButton from '@material-ui/core/IconButton'\nimport FirstPageIcon from '@material-ui/icons/FirstPage'\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\nimport LastPageIcon from '@material-ui/icons/LastPage'\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles()\n  const theme = useTheme()\n  const { count, page, rowsPerPage, onChangePage } = props\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0)\n  }\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1)\n  }\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1)\n  }\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\n  }\n\n  return (\n    <div className={classes.pagination}>\n      <IconButton\n        className={classes.pagination__first}\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label='first page'\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        className={classes.pagination__prev}\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label='previous page'\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        className={classes.pagination__next}\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label='next page'\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        className={classes.pagination__last}\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label='last page'\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  )\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired\n}\n\n/**\n * ExpensesTable formatter\n * @param expenses\n * @param width\n * @param height\n * @returns {JSX.Element}\n * @constructor\n */\nconst ExpensesTable = ({ expenses, width, height }) => {\n  const classes = useStyles()\n  const rows = expenses\n  const [page, setPage] = React.useState(0)\n  const [rowsPerPage, setRowsPerPage] = React.useState(10)\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage)\n\n  return (\n    <TableContainer className={classes['table-container']} component={Paper}>\n      <Table className={classes.table} aria-label='simple table'>\n        <TableHead className={classes.table__head}>\n          <TableRow className={classes.table__head__row}>\n            <TableCell className={classes.table__head__row__cell} align='left'>Description</TableCell>\n            <TableCell className={classes.table__head__row__cell} align='left'>Amount</TableCell>\n            <TableCell className={classes.table__head__row__cell} align='right'>Status</TableCell>\n            <TableCell className={classes.table__head__row__cell} align='right'>Tags</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody className={classes.table__body}>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow className={classes.table__body__row} key={row.id}>\n              <TableCell className={classes.table__body__row__cell} component='th' scope='row'>\n                {row.description}\n              </TableCell>\n              <TableCell className={classes.table__body__row__cell} style={{ width: 160 }} align='right'>\n                {row.amount / 100} {row.currency}\n              </TableCell>\n              <TableCell className={classes.table__body__row__cell} style={{ width: 160 }} align='right'>\n                {row.status}\n              </TableCell>\n              <TableCell className={classes.table__body__row__cell} style={{ width: 160 }} align='right'>\n                {row.tags}\n              </TableCell>\n            </TableRow>\n          ))}\n\n          {emptyRows > 0 && (\n            <TableRow className={classes.table__body__row} style={{ height: 53 * emptyRows }}>\n              <TableCell className={classes.table__body__row__cell} colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter className={classes.table__footer}>\n          <TableRow className={classes.table__footer__row}>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              colSpan={4}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true\n              }}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default ExpensesTable\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport generateRainbow from '../utils/generateRainbow'\nimport { Bar, Doughnut } from 'react-chartjs-2'\n\n/**\n * Format a PieChart with the OpenCollective expenses data\n * @param expenses\n * @param width\n * @param height\n * @returns {JSX.Element}\n * @constructor\n */\nconst PieChart = ({ expenses, width, height }) => {\n  const labels = []\n  const datasets = [\n    {\n      data: [],\n      backgroundColor: [],\n      hoverBackgroundColor: []\n    }\n  ]\n\n  expenses = orderBy(expenses, (item) => item.createdAt)\n\n  expenses.map((item) => {\n    // eslint-disable-next-line new-cap\n    const label = item.tags[0] ?? 'undefined'\n\n    let labelKey = labels.findIndex((i) => i === label)\n\n    if (labelKey === -1) {\n      labelKey = labels.push(label)\n      datasets[0].data[labelKey - 1] = item.amount / 100\n    } else {\n      datasets[0].data[labelKey] += item.amount / 100\n    }\n  })\n\n  labels.map((i, k) => {\n    datasets[0].backgroundColor[k] = generateRainbow(labels.length, k)\n    datasets[0].hoverBackgroundColor[k] = generateRainbow(labels.length, k)\n  })\n\n  const formattedData = {\n    labels: labels,\n    datasets: datasets\n  }\n\n  const options = {\n    maintainAspectRatio: false,\n    responsive: true,\n  }\n\n  return (\n    <div style={{ height: width > 600 ? 300 : 350, position: 'relative' }}>\n      <Doughnut\n        data={formattedData}\n        options={options}\n      />\n    </div>\n  )\n}\n\nexport default PieChart\n","import React, { useState } from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport { IntlProvider, FormattedMessage } from 'react-intl'\nimport moment from 'moment'\nimport Grid from '@material-ui/core/Grid'\nimport { useStyles } from './theme'\nimport BarChart from './components/BarChart'\nimport ExpensesTable from './components/ExpensesTable'\nimport PieChart from './components/PieChart'\nimport { useWindowSize } from \"./utils/useWindowSize\";\n\nconst ALL_EXPENSES = gql`\n  query ExpensesPage(\n    $account: AccountReferenceInput!\n    $slug: String!\n    $offset: Int!\n    $dateFrom: ISODateTime!\n  ) {\n    expenses(\n      account: $account\n      orderBy: { field: CREATED_AT, direction: ASC }\n      offset: $offset\n      limit: 100\n      status: PAID\n      dateFrom: $dateFrom\n    ) {\n      offset\n      totalCount\n      limit\n      nodes {\n        id\n        amount\n        tags\n        description\n        currency\n        status\n        createdAt\n      }\n    }\n    account(slug: $slug) {\n      id\n      imageUrl\n      name\n    }\n  }\n`\n\n/**\n * Transparency page component\n * @param slug The account slug\n * @returns {JSX.Element}\n * @constructor\n */\nconst TransparencyPage = ({ slug, locale, messages, date }) => {\n  const classes = useStyles()\n  const [width, height] = useWindowSize()\n  const offset = 0\n  const dateFrom = useState(date ?? '2001-01-01')\n  /**\n   * Get all expenses\n   */\n  const { loading, error, data, fetchMore } = useQuery(ALL_EXPENSES, {\n    variables: {\n      account: { slug: slug },\n      slug,\n      offset,\n      dateFrom\n    }\n  })\n\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error :(</p>\n\n  const account = data.account\n  const expenses = data.expenses.nodes\n\n  fetchMore({\n    variables: {\n      offset: data.expenses.nodes.length\n    },\n    updateQuery: (prev, { fetchMoreResult }) => {\n      if (!fetchMoreResult) return prev\n\n      fetchMoreResult.expenses.nodes = prev.expenses.nodes.concat(\n        fetchMoreResult.expenses.nodes\n      )\n\n      return Object.assign({}, fetchMoreResult)\n    }\n  }).then((res) => {\n    console.log('Res', res)\n  })\n\n  if (!messages) {\n    messages = {}\n  }\n\n  if (!locale) {\n    locale = 'en'\n  }\n\n  return (\n    <IntlProvider locale={locale} defaultLocale='en' messages={messages}>\n      <div className={classes.wrapper}>\n        <div className={classes.header}>\n          <h1 className={classes.header__title}>\n            <img className={classes.header__logo} src={account.imageUrl} alt='' />\n            {account.name}\n          </h1>\n        </div>\n        <div className={classes.body}>\n          <h2 className={classes.body__title}>\n            <FormattedMessage\n              id='allExpensesFrom'\n              defaultMessage='All expenses from {date}'\n              values={{\n                date: moment(dateFrom, 'YYYY-MM-DD').format('DD/MM/YYYY')\n              }}\n            />\n          </h2>\n          <Grid className={classes.charts} container spacing={5}>\n            <Grid className={classes.charts__bar} item xs={12} md={8}>\n              <BarChart expenses={expenses} width={width} height={height} />\n            </Grid>\n            <Grid className={classes.charts__pie} item xs={12} md={4}>\n              <PieChart expenses={expenses} width={width} height={height} />\n            </Grid>\n            <Grid className={classes.charts__table} item xs={12}>\n              <ExpensesTable expenses={expenses} width={width} height={height} />\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    </IntlProvider>\n  )\n}\n\nexport * from './components/BarChart'\nexport * from './components/PieChart'\nexport * from './components/ExpensesTable'\n\nexport default TransparencyPage\n","import React from 'react'\n\nimport TransparencyPage from 'oc-transparency-page'\nimport 'oc-transparency-page/dist/index.css'\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client'\n\n/**\n * An Open Collective Api Key is highly recommended\n * @type {string}\n */\nconst apiKey = localStorage.getItem('apiKey')\n\nif (!apiKey) {\n  console.error('Missing API Key!')\n}\n\nconst client = new ApolloClient({\n  uri: 'https://api.opencollective.com/graphql/v2/' + apiKey,\n  cache: new InMemoryCache()\n})\n\nconst App = () => {\n  return <ApolloProvider client={client}>\n    <TransparencyPage client={client} slug={'xr-belgium'}\n                      date={'2018-01-01'}\n                      messages={{ 'allExpensesFrom': 'All expenses from {date}' }} />\n  </ApolloProvider>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}