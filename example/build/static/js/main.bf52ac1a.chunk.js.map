{"version":3,"sources":["../../src/utils/generateRainbow.js","../../src/components/BarChart.js","../../src/components/ExpensesTable.js","../../src/components/PieChart.js","../../src/index.js","App.js","index.js"],"names":["numOfSteps","step","h","i","f","q","r","g","b","BarChart","expenses","periods","cats","orderBy","item","month","monthKey","console","catKey","label","data","backgroundColor","borderColor","borderWidth","stack","generateRainbow","formattedData","labels","datasets","options","maintainAspectRatio","useStyles1","makeStyles","root","flexShrink","marginLeft","theme","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","className","onClick","event","disabled","aria-label","Math","PropTypes","isRequired","ExpensesTable","rows","React","setPage","setRowsPerPage","emptyRows","component","Paper","align","key","row","id","scope","style","width","height","colSpan","rowsPerPageOptions","value","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","ActionsComponent","PieChart","hoverBackgroundColor","labelKey","useStyles","flexGrow","paper","control","padding","ALL_EXPENSES","gql","TransparencyPage","slug","locale","messages","date","useState","dateFrom","useQuery","variables","account","offset","loading","error","fetchMore","length","updateQuery","fetchMoreResult","prev","Object","defaultLocale","styles","src","alt","defaultMessage","values","moment","container","spacing","xs","apiKey","localStorage","getItem","client","ApolloClient","uri","cache","InMemoryCache","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf52ac1a.chunk.js","sourcesContent":["/**\n * Helpers to generate a Rainbow between a number of step\n * @param numOfSteps\n * @param step\n * @returns {string}\n */\nexport default (numOfSteps, step) => {\n  let r, g, b\n  const h = step / numOfSteps\n  const i = ~~(h * 6)\n  const f = h * 6 - i\n  const q = 1 - f\n  switch (i % 6) {\n    case 0:\n      r = 1\n      g = f\n      b = 0\n      break\n    case 1:\n      r = q\n      g = 1\n      b = 0\n      break\n    case 2:\n      r = 0\n      g = 1\n      b = f\n      break\n    case 3:\n      r = 0\n      g = q\n      b = 1\n      break\n    case 4:\n      r = f\n      g = 0\n      b = 1\n      break\n    case 5:\n      r = 1\n      g = 0\n      b = q\n      break\n  }\n  return `#${`00${(~~(r * 255)).toString(16)}`.slice(-2)}${`00${(~~(\n    g * 255\n  )).toString(16)}`.slice(-2)}${`00${(~~(b * 255)).toString(16)}`.slice(-2)}`\n}\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport moment from 'moment'\nimport generateRainbow from '../utils/generateRainbow'\nimport { Bar } from 'react-chartjs-2'\n\n/**\n * BarChart formatter for expenses\n * @param expenses\n * @param width\n * @param height\n * @returns {JSX.Element}\n * @constructor\n */\nconst BarChart = ({ expenses, width, height }) => {\n  const periods = []\n  const cats = []\n\n  expenses = orderBy(expenses, (item) => item.createdAt)\n\n  expenses.map((item) => {\n    // eslint-disable-next-line new-cap\n    const month = new moment(item.createdAt).format('MM/YYYY')\n\n    let monthKey = periods.findIndex((i) => i === month)\n\n    if (monthKey === -1) {\n      monthKey = periods.push(month)\n      monthKey--\n    } else {\n    }\n\n    console.log('Month', monthKey)\n\n    let catKey = cats.findIndex((i) => i.label === item.tags[0])\n\n    if (catKey === -1) {\n      if (typeof item.tags[0] !== 'undefined') {\n        catKey = cats.push({\n          label: item.tags[0],\n          data: [],\n          backgroundColor: null,\n          borderColor: null,\n          borderWidth: 1,\n          stack: 'default'\n        })\n\n        catKey = catKey - 1\n      }\n    }\n\n    if (typeof cats[catKey] !== 'undefined') {\n      if (typeof cats[catKey].data[monthKey] === 'undefined') {\n        cats[catKey].data[monthKey] = 0\n      }\n\n      cats[catKey].data[monthKey] += item.amount / 100\n    }\n  })\n\n  cats.map((i, k) => {\n    cats[k].backgroundColor = generateRainbow(cats.length, k)\n    cats[k].borderColor = generateRainbow(cats.length, k)\n  })\n\n  const formattedData = {\n    labels: periods,\n    datasets: cats\n  }\n\n  return (\n    <Bar\n      data={formattedData}\n      options={{\n        maintainAspectRatio: true\n      }}\n    />\n  )\n}\n\nexport default BarChart\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableFooter from '@material-ui/core/TableFooter'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport Paper from '@material-ui/core/Paper'\nimport IconButton from '@material-ui/core/IconButton'\nimport FirstPageIcon from '@material-ui/icons/FirstPage'\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\nimport LastPageIcon from '@material-ui/icons/LastPage'\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5)\n  }\n}))\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1()\n  const theme = useTheme()\n  const { count, page, rowsPerPage, onChangePage } = props\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0)\n  }\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1)\n  }\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1)\n  }\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label='first page'\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label='previous page'\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label='next page'\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label='last page'\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  )\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired\n}\n\n/**\n * ExpensesTable formatter\n * @param expenses\n * @param width\n * @param height\n * @returns {JSX.Element}\n * @constructor\n */\nconst ExpensesTable = ({ expenses, width, height }) => {\n  const rows = expenses\n  const [page, setPage] = React.useState(0)\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage)\n\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label='simple table'>\n        <TableHead>\n          <TableRow>\n            <TableCell align='left'>Description</TableCell>\n            <TableCell align='left'>Amount</TableCell>\n            <TableCell align='right'>Status</TableCell>\n            <TableCell align='right'>Tags</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow key={row.id}>\n              <TableCell component='th' scope='row'>\n                {row.description}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align='right'>\n                {row.amount / 100} {row.currency}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align='right'>\n                {row.status}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align='right'>\n                {row.tags}\n              </TableCell>\n            </TableRow>\n          ))}\n\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              colSpan={3}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true\n              }}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default ExpensesTable\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport generateRainbow from '../utils/generateRainbow'\nimport { Doughnut } from 'react-chartjs-2'\n\n/**\n * Format a PieChart with the OpenCollective expenses data\n * @param expenses\n * @param width\n * @param height\n * @returns {JSX.Element}\n * @constructor\n */\nconst PieChart = ({ expenses, width, height }) => {\n  const labels = []\n  const datasets = [\n    {\n      data: [],\n      backgroundColor: [],\n      hoverBackgroundColor: []\n    }\n  ]\n\n  expenses = orderBy(expenses, (item) => item.createdAt)\n\n  expenses.map((item) => {\n    // eslint-disable-next-line new-cap\n    const label = item.tags[0] ?? 'undefined'\n\n    let labelKey = labels.findIndex((i) => i === label)\n\n    if (labelKey === -1) {\n      labelKey = labels.push(label)\n      datasets[0].data[labelKey - 1] = item.amount / 100\n    } else {\n      datasets[0].data[labelKey] += item.amount / 100\n    }\n  })\n\n  labels.map((i, k) => {\n    datasets[0].backgroundColor[k] = generateRainbow(labels.length, k)\n    datasets[0].hoverBackgroundColor[k] = generateRainbow(labels.length, k)\n  })\n\n  const formattedData = {\n    labels: labels,\n    datasets: datasets\n  }\n\n  return (\n    <Doughnut\n      data={formattedData}\n      options={{\n        maintainAspectRatio: true\n      }}\n    />\n  )\n}\n\nexport default PieChart\n","import React, { useState } from 'react'\nimport styles from './styles.module.css'\nimport { useQuery, gql } from '@apollo/client'\nimport { IntlProvider, FormattedMessage } from 'react-intl'\nimport moment from 'moment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport BarChart from './components/BarChart'\nimport ExpensesTable from './components/ExpensesTable'\nimport PieChart from './components/PieChart'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    height: 140,\n    width: 100\n  },\n  control: {\n    padding: theme.spacing(2)\n  }\n}))\n\nconst ALL_EXPENSES = gql`\n  query ExpensesPage(\n    $account: AccountReferenceInput!\n    $slug: String!\n    $offset: Int!\n    $dateFrom: ISODateTime!\n  ) {\n    expenses(\n      account: $account\n      orderBy: { field: CREATED_AT, direction: ASC }\n      offset: $offset\n      limit: 100\n      status: PAID\n      dateFrom: $dateFrom\n    ) {\n      offset\n      totalCount\n      limit\n      nodes {\n        id\n        amount\n        tags\n        description\n        currency\n        status\n        createdAt\n      }\n    }\n    account(slug: $slug) {\n      id\n      imageUrl\n      name\n    }\n  }\n`\n/**\n * Transparency page component\n * @param slug The account slug\n * @returns {JSX.Element}\n * @constructor\n */\nconst TransparencyPage = ({ slug, locale, messages, date }) => {\n  const classes = useStyles()\n  const [width] = useState(800)\n  const [height] = useState(300)\n  const offset = 0\n  const dateFrom = useState(date ?? '2001-01-01')\n  /**\n   * Get all expenses\n   */\n  const { loading, error, data, fetchMore } = useQuery(ALL_EXPENSES, {\n    variables: {\n      account: { slug: slug },\n      slug,\n      offset,\n      dateFrom\n    }\n  })\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error :(</p>\n\n  const account = data.account\n\n  const expenses = data.expenses.nodes\n\n  fetchMore({\n    variables: {\n      offset: data.expenses.nodes.length\n    },\n    updateQuery: (prev, { fetchMoreResult }) => {\n      if (!fetchMoreResult) return prev\n\n      fetchMoreResult.expenses.nodes = prev.expenses.nodes.concat(\n        fetchMoreResult.expenses.nodes\n      )\n\n      return Object.assign({}, fetchMoreResult)\n    }\n  }).then((res) => {\n    console.log('Res', res)\n  })\n\n  if (!messages) {\n    messages = {}\n  }\n\n  if (!locale) {\n    locale = 'en'\n  }\n\n  return (\n    <IntlProvider locale={locale} defaultLocale='en' messages={messages}>\n      <div className={styles.title}>\n        <h1 className='header'>\n          <img className={styles.header__logo} src={account.imageUrl} alt='' />\n          {account.name}\n        </h1>\n        <div className='content'>\n          <h2>\n            <FormattedMessage\n              id='allExpensesFrom'\n              defaultMessage='All expenses from {date}'\n              values={{\n                date: moment(dateFrom, 'YYYY-MM-DD').format('DD/MM/YYYY')\n              }}\n            />\n          </h2>\n          <Grid container className={classes.root} spacing={2}>\n            <Grid item xs={8}>\n              <BarChart expenses={expenses} width={width} height={height} />\n            </Grid>\n            <Grid item xs={4}>\n              <PieChart expenses={expenses} width={width} height={height} />\n            </Grid>\n          </Grid>\n          <ExpensesTable expenses={expenses} width={width} height={height} />\n        </div>\n      </div>\n    </IntlProvider>\n  )\n}\n\nexport default { TransparencyPage, BarChart, PieChart, ExpensesTable }\n","import React from 'react'\n\nimport TransparencyPage from 'oc-transparency-page'\nimport 'oc-transparency-page/dist/index.css'\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client'\n\n/**\n * An Open Collective Api Key is highly recommended\n * @type {string}\n */\nconst apiKey = localStorage.getItem('apiKey')\n\nconst client = new ApolloClient({\n  uri: 'https://api.opencollective.com/graphql/v2/' + apiKey,\n  cache: new InMemoryCache()\n})\n\nconst App = () => {\n  return <ApolloProvider client={client}>\n    <TransparencyPage client={client} slug={'xr-belgium'}\n                      date={\"2018-01-01\"}\n                      messages={{ 'allExpensesFrom': 'All expenses from {date}' }} />\n  </ApolloProvider>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}